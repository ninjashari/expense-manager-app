/**
 * @file credit-card-service.ts
 * @description This file contains credit card service functions using API routes.
 * It provides credit card bill management, payment tracking, and account management.
 */

/* eslint-disable @typescript-eslint/no-unused-vars */

import { 
  CreditCardBill, 
  CreditCardSummary, 
  BillGenerationParams,
  BillPaymentInfo
} from '@/types/credit-card'
import { Account } from '@/types/account'

/**
 * API response interface for credit card bills
 * @description Structure of bill data as received from API (with string dates)
 */
interface CreditCardBillApiResponse {
  id: string
  userId: string
  accountId: string
  billPeriodStart: string
  billPeriodEnd: string
  billGenerationDate: string
  paymentDueDate: string
  previousBalance: number
  totalSpending: number
  totalPayments: number
  billAmount: number
  minimumPayment: number
  status: string
  paidAmount: number
  paidDate: string | null
  transactionIds: string[]
  paymentTransactionIds: string[]
  isAutoGenerated: boolean
  notes: string | null
  createdAt: string
  updatedAt: string
}

/**
 * Transform API response to CreditCardBill interface
 * @description Converts API response with string dates to CreditCardBill with Date objects
 * @param apiResponse - API response data
 * @returns CreditCardBill interface
 */
function transformApiResponseToBill(apiResponse: CreditCardBillApiResponse): CreditCardBill {
  return {
    ...apiResponse,
    billPeriodStart: new Date(apiResponse.billPeriodStart),
    billPeriodEnd: new Date(apiResponse.billPeriodEnd),
    billGenerationDate: new Date(apiResponse.billGenerationDate),
    paymentDueDate: new Date(apiResponse.paymentDueDate),
    paidDate: apiResponse.paidDate ? new Date(apiResponse.paidDate) : undefined,
    createdAt: new Date(apiResponse.createdAt),
    updatedAt: new Date(apiResponse.updatedAt),
    status: apiResponse.status as CreditCardBill['status'],
    notes: apiResponse.notes || undefined
  }
}

/**
 * Get all credit card accounts for a user
 * @description Retrieves all credit card accounts belonging to the user via API
 * @param userId - User ID to filter accounts
 * @returns Promise resolving to array of credit card accounts
 */
export async function getCreditCardAccounts(userId: string): Promise<Account[]> {
  const response = await fetch('/api/accounts')
  if (!response.ok) {
    throw new Error('Failed to fetch accounts')
  }
  const data = await response.json()
  const accounts: Account[] = data.accounts
  return accounts.filter(account => account.type === 'credit_card' && account.creditCardInfo)
}

/**
 * Get credit card bills for an account
 * @description Retrieves credit card bills for a specific account via API
 * @param accountId - Credit card account ID
 * @param userId - User ID for authorization
 * @returns Promise resolving to array of credit card bills
 */
export async function getCreditCardBills(accountId: string, userId: string): Promise<CreditCardBill[]> {
  const response = await fetch(`/api/credit-card-bills?accountId=${accountId}`)
  if (!response.ok) {
    throw new Error('Failed to fetch credit card bills')
  }
  const data = await response.json()
  return data.bills.map((bill: CreditCardBillApiResponse) => transformApiResponseToBill(bill))
}

/**
 * Get all credit card bills for a user
 * @description Retrieves all credit card bills for a user via API
 * @param userId - User ID to filter bills
 * @returns Promise resolving to array of credit card bills
 */
export async function getAllCreditCardBills(userId: string): Promise<CreditCardBill[]> {
  const response = await fetch('/api/credit-card-bills')
  if (!response.ok) {
    throw new Error('Failed to fetch credit card bills')
  }
  const data = await response.json()
  return data.bills.map((bill: CreditCardBillApiResponse) => transformApiResponseToBill(bill))
}

/**
 * Generate credit card bill for a specific period
 * @description Creates a new credit card bill via API
 * @param params - Bill generation parameters
 * @param userId - User ID for authorization
 * @returns Promise resolving to created credit card bill
 */
export async function generateCreditCardBill(params: BillGenerationParams, userId: string): Promise<CreditCardBill> {
  const response = await fetch('/api/credit-card-bills', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(params),
  })
  
  if (!response.ok) {
    throw new Error('Failed to generate credit card bill')
  }
  
  const data = await response.json()
  return transformApiResponseToBill(data.bill)
}

/**
 * Auto-generate bills for all credit card accounts
 * @description Automatically generates bills for all credit card accounts via API
 * @param userId - User ID for authorization
 * @returns Promise resolving to array of generated bills
 */
export async function autoGenerateBills(userId: string): Promise<CreditCardBill[]> {
  const response = await fetch('/api/credit-card-bills?autoGenerate=true')
  if (!response.ok) {
    throw new Error('Failed to auto-generate bills')
  }
  const data = await response.json()
  return data.bills.map((bill: CreditCardBillApiResponse) => transformApiResponseToBill(bill))
}

/**
 * Mark bill as paid
 * @description Records a payment against a credit card bill via API
 * @param paymentInfo - Payment information
 * @param userId - User ID for authorization
 * @returns Promise resolving to updated credit card bill or null
 */
export async function markBillAsPaid(paymentInfo: BillPaymentInfo, userId: string): Promise<CreditCardBill | null> {
  const response = await fetch(`/api/credit-card-bills/${paymentInfo.billId}/payment`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      paymentAmount: paymentInfo.paymentAmount,
      paymentDate: paymentInfo.paymentDate,
      paymentTransactionId: paymentInfo.paymentTransactionId,
      notes: paymentInfo.notes
    }),
  })
  
  if (!response.ok) {
    throw new Error('Failed to mark bill as paid')
  }
  
  const data = await response.json()
  return data.bill ? transformApiResponseToBill(data.bill) : null
}

/**
 * Get credit card summaries for all accounts
 * @description Creates comprehensive summaries with actual bill data
 * @param userId - User ID for authorization
 * @returns Promise resolving to credit card summaries with bill data
 */
export async function getCreditCardSummaries(userId: string): Promise<CreditCardSummary[]> {
  try {
    const creditCardAccounts = await getCreditCardAccounts(userId)
    
    // Get all bills for the user
    const allBills = await getAllCreditCardBills(userId)
    
    // Create comprehensive summaries from account and bill data
    return await Promise.all(creditCardAccounts.map(async account => {
      const creditInfo = account.creditCardInfo!
      const currentBalance = account.currentBalance
      const creditLimit = creditInfo.creditLimit
      const availableCredit = creditLimit + currentBalance // For credit cards, negative balance means used credit
      const creditUsagePercentage = creditInfo.creditUsagePercentage
      
      // Get bills for this account
      const accountBills = allBills.filter(bill => bill.accountId === account.id)
      const recentBills = accountBills.slice(0, 12) // Last 12 bills
      
      // Find current unpaid bill
      const currentBill = accountBills.find(bill => 
        bill.status === 'generated' || bill.status === 'partial'
      )
      
      // Calculate next bill dates based on account settings
      const today = new Date()
      const currentMonth = today.getMonth()
      const currentYear = today.getFullYear()
      
      let nextBillGeneration = new Date(currentYear, currentMonth, creditInfo.billGenerationDate)
      if (nextBillGeneration <= today) {
        nextBillGeneration = new Date(currentYear, currentMonth + 1, creditInfo.billGenerationDate)
      }
      
      let nextPaymentDue = new Date(currentYear, currentMonth, creditInfo.paymentDueDate)
      if (nextPaymentDue <= today) {
        nextPaymentDue = new Date(currentYear, currentMonth + 1, creditInfo.paymentDueDate)
      }
      
      // Calculate spending statistics
      const last12Months = accountBills.slice(0, 12)
      const monthlyAverageSpending = last12Months.length > 0 
        ? last12Months.reduce((sum, bill) => sum + bill.totalSpending, 0) / last12Months.length
        : 0
      
      const lastMonthSpending = last12Months.length > 0 ? last12Months[0].totalSpending : 0
      const previousMonthSpending = last12Months.length > 1 ? last12Months[1].totalSpending : 0
      
      const spendingTrend = previousMonthSpending > 0 
        ? ((lastMonthSpending - previousMonthSpending) / previousMonthSpending) * 100
        : 0
      
      return {
        account,
        currentBalance,
        creditLimit,
        availableCredit,
        creditUsagePercentage,
        currentBill,
        nextBillGenerationDate: nextBillGeneration,
        nextPaymentDueDate: nextPaymentDue,
        recentBills,
        monthlyAverageSpending,
        lastMonthSpending,
        spendingTrend
      }
    }))
  } catch (error) {
    console.warn('Failed to load credit card summaries:', error)
    return []
  }
}

/**
 * Delete credit card bill
 * @description Deletes a credit card bill via API
 * @param billId - ID of bill to delete
 * @param userId - User ID for authorization
 * @returns Promise resolving to success status
 */
export async function deleteCreditCardBill(billId: string, userId: string): Promise<boolean> {
  const response = await fetch(`/api/credit-card-bills/${billId}`, {
    method: 'DELETE',
  })
  
  if (!response.ok) {
    throw new Error('Failed to delete credit card bill')
  }
  
  const data = await response.json()
  return data.success
} 