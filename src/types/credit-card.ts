/**
 * @file credit-card.ts
 * @description This file contains type definitions for credit card bill management.
 * It defines the structure for bill generation, payment tracking, and bill history.
 */

import { Account } from './account'
import { Transaction } from './transaction'

/**
 * Credit card bill status enumeration
 * @description Defines the possible states of a credit card bill
 */
export type CreditCardBillStatus = 'generated' | 'paid' | 'overdue' | 'partial'

/**
 * Credit card bill interface
 * @description Core structure for credit card bills
 */
export interface CreditCardBill {
  id: string
  userId: string
  accountId: string
  account?: Account
  
  // Bill period
  billPeriodStart: Date
  billPeriodEnd: Date
  billGenerationDate: Date
  paymentDueDate: Date
  
  // Bill amounts
  previousBalance: number
  totalSpending: number
  totalPayments: number
  billAmount: number
  minimumPayment: number
  
  // Bill status
  status: CreditCardBillStatus
  paidAmount: number
  paidDate?: Date
  
  // Related transactions
  transactionIds: string[]
  transactions?: Transaction[]
  paymentTransactionIds: string[]
  paymentTransactions?: Transaction[]
  
  // Metadata
  isAutoGenerated: boolean
  notes?: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Credit card bill summary interface
 * @description Summary information for credit card overview
 */
export interface CreditCardSummary {
  account: Account
  currentBalance: number
  creditLimit: number
  availableCredit: number
  creditUsagePercentage: number
  
  // Current bill information
  currentBill?: CreditCardBill
  nextBillGenerationDate: Date
  nextPaymentDueDate: Date
  
  // Recent bills
  recentBills: CreditCardBill[]
  
  // Usage statistics
  monthlyAverageSpending: number
  lastMonthSpending: number
  spendingTrend: number // percentage change
}

/**
 * Bill generation parameters
 * @description Parameters for generating a new credit card bill
 */
export interface BillGenerationParams {
  accountId: string
  billPeriodStart: Date
  billPeriodEnd: Date
  billGenerationDate: Date
  paymentDueDate: Date
  previousBalance?: number
}

/**
 * Bill payment information
 * @description Information for recording bill payments
 */
export interface BillPaymentInfo {
  billId: string
  paymentAmount: number
  paymentDate: Date
  paymentTransactionId?: string
  notes?: string
}

/**
 * Credit card bill form data
 * @description Form data for manual bill creation/editing
 */
export interface CreditCardBillFormData {
  accountId: string
  billPeriodStart: Date
  billPeriodEnd: Date
  billGenerationDate: Date
  paymentDueDate: Date
  previousBalance: number
  totalSpending: number
  totalPayments: number
  billAmount: number
  minimumPayment: number
  status: CreditCardBillStatus
  paidAmount: number
  paidDate?: Date
  notes?: string
}

/**
 * Bill status options for UI
 * @description Human-readable labels for bill statuses
 */
export const BILL_STATUS_OPTIONS = [
  { value: 'generated', label: 'Generated', color: 'blue' },
  { value: 'paid', label: 'Paid', color: 'green' },
  { value: 'overdue', label: 'Overdue', color: 'red' },
  { value: 'partial', label: 'Partially Paid', color: 'orange' },
] as const

/**
 * Utility function to get bill status label
 * @description Returns human-readable label for bill status
 * @param status - Bill status value
 * @returns Human-readable label and color
 */
export function getBillStatusConfig(status: CreditCardBillStatus) {
  return BILL_STATUS_OPTIONS.find(option => option.value === status) || 
         { value: status, label: status, color: 'gray' }
}

/**
 * Utility function to calculate minimum payment
 * @description Calculates minimum payment based on bill amount
 * @param billAmount - Total bill amount
 * @param creditLimit - Credit card limit
 * @returns Minimum payment amount
 */
export function calculateMinimumPayment(billAmount: number): number {
  // Standard minimum payment calculation (5% of bill amount or â‚¹500, whichever is higher)
  const percentageAmount = billAmount * 0.05
  const minimumBase = 500
  
  return Math.max(percentageAmount, minimumBase)
}

/**
 * Utility function to determine bill status
 * @description Determines bill status based on payment and due date
 * @param billAmount - Total bill amount
 * @param paidAmount - Amount paid
 * @param paymentDueDate - Payment due date
 * @param currentDate - Current date for comparison
 * @returns Bill status
 */
export function determineBillStatus(
  billAmount: number,
  paidAmount: number,
  paymentDueDate: Date,
  currentDate: Date = new Date()
): CreditCardBillStatus {
  const isOverdue = currentDate > paymentDueDate
  const isPaid = paidAmount >= billAmount
  const isPartiallyPaid = paidAmount > 0 && paidAmount < billAmount
  
  if (isPaid) {
    return 'paid'
  } else if (isPartiallyPaid) {
    return isOverdue ? 'overdue' : 'partial'
  } else if (isOverdue) {
    return 'overdue'
  } else {
    return 'generated'
  }
}

/**
 * Utility function to get next bill dates
 * @description Calculates next bill generation and payment due dates
 * @param billGenerationDay - Day of month for bill generation (1-31)
 * @param paymentDueDay - Day of month for payment due (1-31)
 * @param referenceDate - Reference date for calculation
 * @returns Next bill generation and payment due dates
 */
export function getNextBillDates(
  billGenerationDay: number,
  paymentDueDay: number,
  referenceDate: Date = new Date()
): { nextBillGenerationDate: Date; nextPaymentDueDate: Date } {
  const currentDate = new Date(referenceDate)
  const currentDay = currentDate.getDate()
  
  // Calculate next bill generation date
  let nextBillGenerationDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), billGenerationDay)
  if (currentDay >= billGenerationDay) {
    // Move to next month
    nextBillGenerationDate = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, billGenerationDay)
  }
  
  // Calculate next payment due date (should be after bill generation)
  let nextPaymentDueDate = new Date(nextBillGenerationDate.getFullYear(), nextBillGenerationDate.getMonth(), paymentDueDay)
  if (paymentDueDay <= billGenerationDay) {
    // Payment due date is in the next month
    nextPaymentDueDate = new Date(nextBillGenerationDate.getFullYear(), nextBillGenerationDate.getMonth() + 1, paymentDueDay)
  }
  
  return {
    nextBillGenerationDate,
    nextPaymentDueDate
  }
} 